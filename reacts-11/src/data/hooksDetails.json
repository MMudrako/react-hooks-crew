[
    {
        "id": "useState",
        "legend": "useState is the fundamental hook for managing local state in functional components. It allows you to preserve values between renders and update them in response to user input, API calls, or internal logic. It triggers a re-render when the state changes, ensuring your UI reflects the current state. In most cases useState tracks changing values inside a component.",
        "MO": [
            {
                "paramName": "initialState",
                "type": "any",
                "description": "Initial state value. Can be a primitive, object, array, or function returning a value."
            }
        ],
        "hookPrint": [
            {
                "name": "[state, setState]",
                "type": "[any, function]",
                "description": "An array where the first element is the current state and the second is the function to update it."
            }
        ],
        "missionBriefing": "In this demo, the mission of the useState hook hero, 'The Keeper', is to manage two related pieces of state: a temporary selection (`selectedFruits`) and a cumulative record (`fruits`). Each update reflects immediately in the UI. The logic is split between two hooks to allow users to preview and confirm their selection, demonstrating how useState tracks evolving state in user interactions."
    },
    {
        "id": "useRef",
        "legend": "useRef creates a persistent, mutable reference that doesn’t cause a component to re-render when changed. Commonly used for accessing DOM elements directly, it also serves as a safe container for storing values across renders (e.g., timers or previous state).",
        "MO": [
            {
                "paramName": "initialValue",
                "type": "any",
                "description": "Initial value to assign to the `.current` property of the ref object."
            }
        ],
        "hookPrint": [
            {
                "name": "ref",
                "type": "{ current: any }",
                "description": "An object with a `.current` property that can be mutated without triggering re-renders."
            }
        ],
        "missionBriefing": "'The Archivist' demonstrates how useRef stores mutable values between renders without causing re-renders. It remembers past fruit combinations, enabling users to 'replay' previous orders. This mission shows useRef as a static vault for non-visual memory—ideal for preserving state across interactions without affecting the UI."
    },
    {
        "id": "useEffect",
        "legend": "useEffect manages side effects in React functional components. It runs after the DOM is updated and can handle tasks such as data fetching, subscriptions, and manual DOM manipulation. It accepts a cleanup function for handling teardown logic like clearing timers or unsubscribing from services.",
        "MO": [
            {
                "paramName": "effect",
                "type": "function",
                "description": "The side effect function to run after the render. Can return a cleanup function."
            },
            {
                "paramName": "deps?",
                "type": "array",
                "description": "Optional dependency array that determines when the effect should re-run."
            }
        ],
        "hookPrint": [
            {
                "name": "void",
                "type": "undefined",
                "description": "Does not return anything directly; instead, it executes the effect function asynchronously."
            }
        ],
        "missionBriefing": "In this mission, useEffect hook as 'The Tracker' listens for changes in fruit selection. When the list updates, a short-lived message confirms the action. This demonstrates useEffect as a reactive observer, triggered by specific dependencies. A timer is used to auto-dismiss the message, showing how cleanup works.This effect introduces a delay after the user clears their selection. If no new selection is made within 5 seconds, the interface suggests a default fruit. The useEffect hook handles this delayed side effect and cleans up on every rerun."
    },
    {
        "id": "useContext",
        "legend": "useContext provides access to values stored in a React context. It lets components subscribe to context changes and consume global data without manually passing props. Useful for themes, localization, authentication, and shared app state.",
        "MO": [
            {
                "paramName": "Context",
                "type": "React.Context",
                "description": "The context object created by `React.createContext()`."
            }
        ],
        "hookPrint": [
            {
                "name": "value",
                "type": "any",
                "description": "The current value of the context, updated when the provider's value changes."
            }
        ],
        "missionBriefing": "In this mission, 'The Architect' provides a shared mission mode to it's children components. This global state is made accessible to any crew member without prop drilling. It shows how components can stay in sync via a centralized data provider—ideal for UI themes, app status, or global preferences."
    },
    {
        "id": "useMemo",
        "legend": "useMemo memorizes the result of a computation between renders. It only recomputes when dependencies change, helping avoid expensive recalculations. Ideal for optimizing render performance when dealing with costly calculations or derived data.",
        "MO": [
            {
                "paramName": "factory",
                "type": "() => any",
                "description": "Function that returns the value to be memoized."
            },
            {
                "paramName": "deps",
                "type": "array",
                "description": "Dependency array. The memoized result is recalculated only when one of the dependencies changes."
            }
        ],
        "hookPrint": [
            {
                "name": "memoizedValue",
                "type": "any",
                "description": "The cached result of the computation."
            }
        ]
    },
    {
        "id": "useCallback",
        "legend": "useCallback returns a memoized version of a function that only changes when its dependencies do. Useful when passing callbacks to deeply nested components that rely on reference equality to prevent unnecessary renders.",
        "MO": [
            {
                "paramName": "callback",
                "type": "function",
                "description": "The function to be memoized."
            },
            {
                "paramName": "deps",
                "type": "array",
                "description": "Dependency array that determines when to recreate the memoized function."
            }
        ],
        "hookPrint": [
            {
                "name": "memoizedCallback",
                "type": "function",
                "description": "The same function instance unless one of the dependencies changes."
            }
        ]
    },
    {
        "id": "useLayoutEffect",
        "legend": "useLayoutEffect is similar to useEffect, but it fires synchronously after all DOM mutations and before the browser paints. It’s used for layout measurements, style mutations, and scenarios where you need to read layout before the screen updates.",
        "MO": [
            {
                "paramName": "effect",
                "type": "function",
                "description": "The layout effect function to run after render but before paint."
            },
            {
                "paramName": "deps?",
                "type": "array",
                "description": "Optional dependency array to control when the effect runs."
            }
        ],
        "hookPrint": [
            {
                "name": "void",
                "type": "undefined",
                "description": "Same as useEffect — it performs side effects but does not return a usable value."
            }
        ]
    },
    {
        "id": "useImperativeHandle",
        "legend": "useImperativeHandle lets you customize the exposed instance value when using `ref` with a child component. It's a way to explicitly define what a parent can access when using `forwardRef`.",
        "MO": [
            {
                "paramName": "ref",
                "type": "Ref",
                "description": "A forwarded ref from the parent component."
            },
            {
                "paramName": "createHandle",
                "type": "() => object",
                "description": "Function returning the instance value to expose to the parent."
            },
            {
                "paramName": "deps?",
                "type": "array",
                "description": "Optional dependency array for memoizing the handle."
            }
        ],
        "hookPrint": [
            {
                "name": "void",
                "type": "undefined",
                "description": "Modifies the behavior of the provided ref but doesn’t return a value itself."
            }
        ]
    },
    {
        "id": "useId",
        "legend": "useId is a stable ID generator useful for accessibility attributes or when associating form inputs with labels. It guarantees unique, consistent IDs across client and server renders, which is important in SSR applications.",
        "MO": [],
        "hookPrint": [
            {
                "name": "id",
                "type": "string",
                "description": "A unique, deterministic ID string for use in DOM attributes."
            }
        ]
    },
    {
        "id": "useTransition",
        "legend": "useTransition enables deferred rendering of non-urgent UI updates. It lets you mark updates as transitions, preventing them from blocking urgent interactions like clicks or typing.",
        "MO": [],
        "hookPrint": [
            {
                "name": "[isPending, startTransition]",
                "type": "[boolean, function]",
                "description": "Boolean indicating if the transition is pending, and a function to wrap non-urgent updates."
            }
        ]
    },
    {
        "id": "useReducer",
        "legend": "useReducer is an alternative to useState for managing more complex state logic. It follows a reducer pattern where state transitions are handled by dispatching actions, making it easier to manage nested or related state changes.",
        "MO": [
            {
                "paramName": "reducer",
                "type": "(state, action) => newState",
                "description": "A function that determines how state should update in response to an action."
            },
            {
                "paramName": "initialState",
                "type": "any",
                "description": "The starting value for the state."
            },
            {
                "paramName": "init?",
                "type": "function",
                "description": "Optional initializer function to lazily create the initial state."
            }
        ],
        "hookPrint": [
            {
                "name": "[state, dispatch]",
                "type": "[any, function]",
                "description": "The current state and a dispatch function to send actions."
            }
        ]
    }
]